// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Our combined User model for authentication and profile data
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  username          String    @unique
  password          String // We will store a hashed password here
  fullName          String?   @map("full_name")
  role              Role      // Uses the Role enum defined below
  status            Status    @default(Active) // Uses the Status enum
  bio               String?
  reputationPoints  Int       @default(0) @map("reputation_points")
  avatarUrl         String?   @map("avatar_url")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

    // RELATION: A user with role 'organization' has one Organization profile
  organization      Organization?

    // NEW RELATIONS
  submittedReports  Report[]
  sentMessages      ReportMessage[]

  @@map("users") // This model maps to a table named "users" in the database
}

// ADD THIS NEW MODEL
model Organization {
  id          String    @id @default(uuid())
  name        String
  websiteUrl  String?   @map("website_url")
  logoUrl     String?   @map("logo_url")

  // RELATION: An Organization is owned by one User
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique @map("user_id")

  // RELATION: An Organization can have many Programs
  programs    Program[]

  @@map("organizations")
}

// ADD THIS NEW MODEL
model Program {
  id            String    @id @default(uuid())
  title         String
  description   String?
  policy        String?
  scope         String?
  outOfScope    String?   @map("out_of_scope")
  minBounty     Int?      @map("min_bounty")
  maxBounty     Int?      @map("max_bounty")
  tags          String[]

  // RELATION: A Program belongs to one Organization
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String      @map("organization_id")

// NEW RELATION
  reports         Report[]

  @@map("programs")
}

// --- ADD ALL THE FOLLOWING NEW MODELS ---

model Report {
  id                  String    @id @default(uuid())
  title               String
  severity            String
  status              String    @default("New")
  description         String?
  stepsToReproduce    String?   @map("steps_to_reproduce")
  impact              String?
  createdAt           DateTime  @default(now()) @map("created_at")

  // Relation to the Program it was submitted to
  program             Program   @relation(fields: [programId], references: [id])
  programId           String    @map("program_id")

  // Relation to the User (hacker) who reported it
  reporter            User      @relation(fields: [reporterId], references: [id])
  reporterId          String    @map("reporter_id")

  attachments         ReportAttachment[]
  messages            ReportMessage[]

  @@map("reports")
}

model ReportAttachment {
  id          String    @id @default(uuid())
  fileUrl     String    @map("file_url")
  fileName    String?   @map("file_name")
  fileType    String?   @map("file_type")
  uploadedAt  DateTime  @default(now()) @map("uploaded_at")

  report      Report    @relation(fields: [reportId], references: [id])
  reportId    String    @map("report_id")

  @@map("report_attachments")
}

model ReportMessage {
  id          String    @id @default(uuid())
  content     String
  createdAt   DateTime  @default(now()) @map("created_at")

  report      Report    @relation(fields: [reportId], references: [id])
  reportId    String    @map("report_id")

  sender      User      @relation(fields: [senderId], references: [id])
  senderId    String    @map("sender_id")

  attachments MessageAttachment[]

  @@map("report_messages")
}

model MessageAttachment {
  id          String    @id @default(uuid())
  fileUrl     String    @map("file_url")
  fileName    String?   @map("file_name")
  fileType    String?   @map("file_type")
  uploadedAt  DateTime  @default(now()) @map("uploaded_at")

  message     ReportMessage @relation(fields: [messageId], references: [id])
  messageId   String        @map("message_id")

  @@map("message_attachments")
}


enum Role {
  hacker
  organization
  admin
}

enum Status {
  Active
  Suspended
}